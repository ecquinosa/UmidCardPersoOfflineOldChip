<?xml version="1.0"?>
<doc>
<assembly>
<name>
UMIDCardPerso
</name>
</assembly>
<members>
<member name="T:UMIDCardPerso.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:UMIDCardPerso.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:UMIDCardPerso.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:UMIDCardPerso.CommManager.TransmissionType">
 <summary>
 enumeration to hold our transmission types
 </summary>
</member>
<member name="T:UMIDCardPerso.CommManager.MessageType">
 <summary>
 enumeration to hold our message types
 </summary>
</member>
<member name="P:UMIDCardPerso.CommManager.BaudRate">
 <summary>
 Property to hold the BaudRate
 of our manager class
 </summary>
</member>
<member name="P:UMIDCardPerso.CommManager.Parity">
 <summary>
 property to hold the Parity
 of our manager class
 </summary>
</member>
<member name="P:UMIDCardPerso.CommManager.StopBits">
 <summary>
 property to hold the StopBits
 of our manager class
 </summary>
</member>
<member name="P:UMIDCardPerso.CommManager.DataBits">
 <summary>
 property to hold the DataBits
 of our manager class
 </summary>
</member>
<member name="P:UMIDCardPerso.CommManager.PortName">
 <summary>
 property to hold the PortName
 of our manager class
 </summary>
</member>
<member name="P:UMIDCardPerso.CommManager.CurrentTransmissionType">
 <summary>
 property to hold our TransmissionType
 of our manager class
 </summary>
</member>
<member name="P:UMIDCardPerso.CommManager.DisplayWindow">
 <summary>
 property to hold our display window
 value
 </summary>
</member>
<member name="P:UMIDCardPerso.CommManager.Message">
 <summary>
 Property to hold the message being sent
 through the serial port
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:UMIDCardPerso.CommManager.Type">
 <summary>
 Message to hold the transmission type
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:UMIDCardPerso.CommManager.#ctor(System.String,System.String,System.String,System.String,System.String,System.Windows.Forms.RichTextBox)">
 <summary>
 Constructor to set the properties of our Manager Class
 </summary>
 <param name="baud">Desired BaudRate</param>
 <param name="par">Desired Parity</param>
 <param name="sBits">Desired StopBits</param>
 <param name="dBits">Desired DataBits</param>
 <param name="name">Desired PortName</param>
</member>
<member name="M:UMIDCardPerso.CommManager.#ctor">
 <summary>
 Comstructor to set the properties of our
 serial port communicator to nothing
 </summary>
</member>
<member name="M:UMIDCardPerso.CommManager.HexToByte(System.String)">
 <summary>
 method to convert hex string into a byte array
 </summary>
 <param name="msg">string to convert</param>
 <returns>a byte array</returns>
</member>
<member name="M:UMIDCardPerso.CommManager.ByteToHex(System.Byte[])">
 <summary>
 method to convert a byte array into a hex string
 </summary>
 <param name="comByte">byte array to convert</param>
 <returns>a hex string</returns>
</member>
<member name="M:UMIDCardPerso.CommManager.DisplayData(UMIDCardPerso.CommManager.MessageType,System.String)">
 <summary>
 Method to display the data to and
 from the port on the screen
 </summary>
 <remarks></remarks>
</member>
<member name="M:UMIDCardPerso.CommManager.comPort_DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
 <summary>
 method that will be called when theres data waiting in the buffer
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="T:UMIDCardPerso.ClassDataAccessOleDB">
 <summary>
 Data Access Class for OleDB Queries.
 </summary>
 <remarks>
 Code By : BARON PATRICK T. PAREDES<br/>
 Contact#: 0927-8497119<br/>
 Email   : barspars@yahoo.com<br/>
 Email   : baronpatrick.paredes@gmail.com<br/>
 Date    : December 01, 2009
 </remarks>
</member>
<member name="M:UMIDCardPerso.ClassDataAccessOleDB.#ctor(System.String)">
 <summary>
 Constructing New Data Access Object
 </summary>
 <param name="ConnectionString">A Valid OleDB Connection String.</param>
 <remarks>Use connection string generated by a UDL File.</remarks>
 <example>Dim Obj As New ClassDataAccess(ValidConnectionString)</example>
</member>
<member name="P:UMIDCardPerso.ClassDataAccessOleDB.Exception">
 <summary>
 Exception Property of the object.
 </summary>
 <returns>Returns the error exception thrown by the object.</returns>
</member>
<member name="P:UMIDCardPerso.ClassDataAccessOleDB.DataReader">
 <summary>
 An OleDBbDataReader Object returned after executing a successful execution of a SQL Command.
 </summary>
 <returns>Current OleDbDataReader in object memory.</returns>
</member>
<member name="P:UMIDCardPerso.ClassDataAccessOleDB.DataTable">
 <summary>
 A DataTable Object returned after executing a successful execution of a SQL Command.
 </summary>
 <returns>Current DataTable in object memory.</returns>
</member>
<member name="M:UMIDCardPerso.ClassDataAccessOleDB.CloseConnection">
 <summary>
 Closes the connection properly.
 </summary>
</member>
<member name="M:UMIDCardPerso.ClassDataAccessOleDB.Connect(System.String)">
 <summary>
 Connect using the connection string provided by the constructor.
 </summary>
 <param name="ConnectionString">A Valid OleDB Connection String.</param>
 <returns>True=Connection Success, False=Connection Failed.</returns>
 <example>Obj.Connect(ValidConnectionString)</example>
</member>
<member name="M:UMIDCardPerso.ClassDataAccessOleDB.SQL(System.String,UMIDCardPerso.ClassDataAccessOleDB.ConnectionType)">
 <summary>
 SQL Function for any SQL Command Syntax.
 </summary>
 <param name="SQLQuery">A Valid SQL Query Command.</param>
 <param name="ConnType"><see>ConnectioType</see></param>
 <returns>True=Command Success, False=Command Failed</returns>
 <example>
 1. Obj.SQL("SELECT * FROM TABLE1",ConnectionType.DataReader)<br></br>
    Returns OleDbDataReader<br></br>
 2. Obj.SQL("DELETE FROM TABLE1", ConnectionType.DataCommand)<br></br>
 3. Obj.SQL("INSERT INTO TABLE1 VALUES('VALUE')", ConnectionType.DataCommand)<br></br>
 4. Obj.SQL("UPDATE TABLE1 SET Field1='VALUE'", ConnectionType.DataCommand)<br></br>
 5. Obj.SQL("SELECT * FROM TABLE1", ConnectionType.DataAdapter)<br></br>
    Returns DataTable
 </example>
</member>
<member name="M:UMIDCardPerso.ClassDataAccessOleDB.FillListview(System.Windows.Forms.ListView@,System.String,System.Boolean,System.Boolean,System.Boolean,System.Object)">
 <summary>
 Procedure for populating data into a ListView Object with the current DataReader.
 </summary>
 <param name="lstView">A Valid Listview Object</param>
 <param name="SQLQuery">A Valid SQL SELECT Query Command</param>
 <param name="CreateColumns">Directs the listview object to create new Columns that is equal to the SQL Fields.</param>
 <param name="AutoResize">For the listview to autoresize width.</param>
 <param name="AlternateColors">Directs the listview to change colors alternately</param>
 <param name="AlternateListViewColor">The Color of the listview</param>
 <returns>True=Success, False=Failed</returns>
 <remarks>Accepts SQL SELECT Query only</remarks>
 <example>Obj.fillListview(ListView,"SELECT * FROM TABLE1")</example>
</member>
<member name="M:UMIDCardPerso.ClassDataAccessOleDB.FillCombobox(System.Windows.Forms.ComboBox@,System.String)">
 <summary>
 Procedure for populating data into a ComboBox Object with the current DataReader.
 </summary>
 <param name="cmbBox">A Valid ComboBox Object.</param>
 <param name="SQLQuery">A Valid SQL SELECT Query Command.</param>
 <returns>True=Success, False=Failed</returns>
 <remarks>
 Use only SELECT Command with a single field selection<br></br>
 e.g<br></br>
 SELECT Field1 FROM Table1
 </remarks>
 <example>Obj.fillCombobox(ComboBox,"SELECT Field1 FROM Table1")</example>
</member>
<member name="M:UMIDCardPerso.ClassDataAccessOleDB.DataTableToListview(System.Windows.Forms.ListView@,System.Data.DataTable@,System.Boolean,System.Boolean,System.Boolean,System.Object)">
 <summary>
 Procedure to populate data into a Listview Object using an existing DataTable Object.
 </summary>
 <param name="lstView">A Valid ListView Object.</param>
 <param name="dTable">A Valid DataTable Object.</param>
 <param name="Header">Copies DataTable Header into ListView Columns.</param>
 <param name="AutoResize">Directs the listview to autoresize.</param>
 <param name="AlternateColors">Directs the listview to change colors alternately</param>
 <param name="AlternateListViewColor">The Color of the listview</param>
 <returns>True=Success, False=Failed</returns>
 <remarks>Accepts SQL SELECT Query only.</remarks>
 <example>Obj.dataTableToListview(ListView,DataTable,True,True)</example>
</member>
<member name="M:UMIDCardPerso.ClassDataAccessOleDB.GetFieldNames(System.String)">
 <summary>
 Procedure for populating Table Fields into a String Array.
 </summary>
 <param name="SQLQuery">A Valid SQL SELECT Query Command.</param>
 <returns>An array of string consisting the current fields of a table.</returns>
 <remarks>
 1. Accepts SQL SELECT Query only<br></br>
 2. SELECT Top 1 for optimized performance.
 </remarks>
 <example>Obj.GetFieldNames("SELECT * FROM Table1")</example>
</member>
<member name="M:UMIDCardPerso.ClassDataAccessOleDB.ColorListview(System.Windows.Forms.ListView@,System.Drawing.Color)">
 <summary>
 Alternatly draws color to a given ListView Object.
 </summary>
 <param name="lstView">A Valid ListView Object.</param>
 <param name="AlternateColor">Color of the ListView</param>
 <example>Obj.colorListview(ListView,System.Drawing.Color.Blue)</example>
</member>
<member name="M:UMIDCardPerso.ClassDataAccessOleDB.Dispose">
 <summary>
 Deconstructor of the object.
 </summary>
 <example>Obj.Dispose()</example>
</member>
<member name="M:UMIDCardPerso.ClassDataAccessOleDB.Dispose(System.Boolean)">
 <summary>
 Deconstructing routine of the object.
 </summary>
 <example>Dispose(True)</example>
</member>
<member name="M:UMIDCardPerso.ClassEncryption.TripleDesEncryptText(System.String)">
 <summary>
 Encrypts a text using TripleDES Encryption.
 </summary>
 <param name="strText">A Valid String Object.</param>
 <returns>Encrypted Text</returns>
 <remarks>Encryption Key is "baronpogi" without the quotes.</remarks>
</member>
<member name="M:UMIDCardPerso.ClassEncryption.TripleDesDecryptText(System.String)">
 <summary>
 Decrypts a text using TripleDes Decryption.
 </summary>
 <param name="strText">A Valid String Object.</param>
 <returns>Decrypted Text</returns>
 <remarks>Decryption Key is "baronpogi" without the quotes.</remarks>
</member>
<member name="M:UMIDCardPerso.ClassEncryption.TripleDesEncrypt(System.String,System.String)">
 <summary>
 Procedure for ecrypting text using TripleDes Encryption.
 </summary>
 <param name="strText">A Valid String Object.</param>
 <param name="strEncrKey">A Valid Key for Encryption.</param>
 <returns>Encrypted Text</returns>
</member>
<member name="M:UMIDCardPerso.ClassEncryption.TripleDesDecrypt(System.String,System.String)">
 <summary>
 Procedure for decrypting text using TripleDes Dencryption.
 </summary>
 <param name="strText">A Valid String Object.</param>
 <param name="sDecrKey">A Valid Key for Dencryption.</param>
 <returns>Dencrypted Text</returns>
</member>
<member name="M:UMIDCardPerso.ClassEncryption.MD5Encrypt(System.String)">
 <summary>
 Encrypts a String using MD5 Encryption.
 </summary>
 <param name="StringToEncrypt">A Valid String Object.</param>
 <returns>Encrypted Text.</returns>
 <remarks>This code doesn't have a decryption procedure.</remarks>
</member>
<member name="M:UMIDCardPerso.ClassEncryption.EnDeCrypt(System.String)">
 <summary>
 Procedure for Encrypting and Decrypting a simple text by changing the characters into a special character.
 </summary>
 <param name="StringToEnDecrypt">A Valid String Object.</param>
 <returns>Encrypted or Decrypted text.</returns>
 <remarks>Returns a decrypted text when the parameter is encrypted and vice versa.</remarks>
</member>
<member name="M:UMIDCardPerso.formSettings.SetDefaults">
 <summary>
 Method to initialize serial port
 values to standard defaults
 </summary>
</member>
<member name="M:UMIDCardPerso.formSettings.LoadValues">
 <summary>
 methos to load our serial
 port option values
 </summary>
</member>
<member name="M:UMIDCardPerso.formSettings.SetControlState">
 <summary>
 method to set the state of controls
 when the form first loads
 </summary>
</member>
<member name="T:UMIDCardPerso.SCARD_IO_REQUEST">
 <summary> 
 The SCARD_IO_REQUEST structure begins a protocol control information structure. Any protocol-specific information then immediately follows this structure. The entire length of the structure must be aligned with the underlying hardware architecture word size. For example, in Win32 the length of any PCI information must be a multiple of four bytes so that it aligns on a 32-bit boundary. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.SCARD_IO_REQUEST.dwProtocol">
 <summary> 
 Protocol in use. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.SCARD_IO_REQUEST.cbPciLength">
 <summary> 
 Length, in bytes, of the SCARD_IO_REQUEST structure plus any following PCI-specific information. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.APDURec.bCLA">
 <summary> 
 The T=0 instruction class. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.APDURec.bINS">
 <summary> 
 An instruction code in the T=0 instruction class. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.APDURec.bP1">
 <summary> 
 Reference codes that complete the instruction code. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.APDURec.bP2">
 <summary> 
 Reference codes that complete the instruction code. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.APDURec.bP3">
 <summary> 
 The number of data bytes to be transmitted during the command, per ISO 7816-4, Section 8.2.1. 
 </summary> 
</member>
<member name="T:UMIDCardPerso.SCARD_READERSTATE">
 <summary> 
 The SCARD_READERSTATE structure is used by functions for tracking smart cards within readers. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.SCARD_READERSTATE.RdrName">
 <summary> 
 Pointer to the name of the reader being monitored. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.SCARD_READERSTATE.UserData">
 <summary> 
 Not used by the smart card subsystem. This member is used by the application. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.SCARD_READERSTATE.RdrCurrState">
 <summary> 
 Current state of the reader, as seen by the application. This field can take on any of the following values, in combination, as a bit mask. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.SCARD_READERSTATE.RdrEventState">
 <summary> 
 Current state of the reader, as known by the smart card resource manager. This field can take on any of the following values, in combination, as a bit mask. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.SCARD_READERSTATE.ATRLength">
 <summary> 
 Number of bytes in the returned ATR. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.SCARD_READERSTATE.ATRValue">
 <summary> 
 ATR of the inserted card, with extra alignment bytes. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_SCOPE_USER">
 <summary> 
 The context is a user context, and any database operations 
 are performed within the domain of the user. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_SCOPE_TERMINAL">
 <summary> 
 The context is that of the current terminal, and any database 
 operations are performed within the domain of that terminal. 
 (The calling application must have appropriate access permissions 
 for any database actions.) 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_SCOPE_SYSTEM">
 <summary> 
 The context is the system context, and any database operations 
 are performed within the domain of the system. (The calling 
 application must have appropriate access permissions for any 
 database actions.) 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_STATE_UNAWARE">
 <summary> 
 The application is unaware of the current state, and would like 
 to know. The use of this value results in an immediate return 
 from state transition monitoring services. This is represented 
 by all bits set to zero. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_STATE_IGNORE">
 <summary> 
 The application requested that this reader be ignored. No other 
 bits will be set. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_STATE_CHANGED">
 <summary> 
 This implies that there is a difference between the state 
 believed by the application, and the state known by the Service 
 Manager.When this bit is set, the application may assume a 
 significant state change has occurred on this reader. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_STATE_UNKNOWN">
 <summary> 
 This implies that the given reader name is not recognized by 
 the Service Manager. If this bit is set, then SCARD_STATE_CHANGED 
 and SCARD_STATE_IGNORE will also be set. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_STATE_UNAVAILABLE">
 <summary> 
 This implies that the actual state of this reader is not 
 available. If this bit is set, then all the following bits are 
 clear. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_STATE_EMPTY">
 <summary> 
 This implies that there is not card in the reader. If this bit 
 is set, all the following bits will be clear. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_STATE_PRESENT">
 <summary> 
 This implies that there is a card in the reader. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_STATE_ATRMATCH">
 <summary> 
 This implies that there is a card in the reader with an ATR 
 matching one of the target cards. If this bit is set, 
 SCARD_STATE_PRESENT will also be set. This bit is only returned 
 on the SCardLocateCard() service. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_STATE_EXCLUSIVE">
 <summary> 
 This implies that the card in the reader is allocated for 
 exclusive use by another application. If this bit is set, 
 SCARD_STATE_PRESENT will also be set. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_STATE_INUSE">
 <summary> 
 This implies that the card in the reader is in use by one or 
 more other applications, but may be connected to in shared mode. 
 If this bit is set, SCARD_STATE_PRESENT will also be set. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_STATE_MUTE">
 <summary> 
 This implies that the card in the reader is unresponsive or not 
 supported by the reader or software. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_STATE_UNPOWERED">
 <summary> 
 This implies that the card in the reader has not been powered up. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_SHARE_EXCLUSIVE">
 <summary> 
 This application is not willing to share this card with other 
 applications. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_SHARE_SHARED">
 <summary> 
 This application is willing to share this card with other 
 applications. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_SHARE_DIRECT">
 <summary> 
 This application demands direct control of the reader, so it 
 is not available to other applications. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_LEAVE_CARD">
 <summary> 
 Don't do anything special on close 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_RESET_CARD">
 <summary> 
 Reset the card on close 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_UNPOWER_CARD">
 <summary> 
 Power down the card on close 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_EJECT_CARD">
 <summary> 
 Eject the card on close 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_PROTOCOL_UNDEFINED">
 <summary> 
 There is no active protocol. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_PROTOCOL_T0">
 <summary> 
 T=0 is the active protocol. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_PROTOCOL_T1">
 <summary> 
 T=1 is the active protocol. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_PROTOCOL_RAW">
 <summary> 
 Raw is the active protocol. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_PROTOCOL_DEFAULT">
 <summary>
 Use implicit PTS.
 </summary>
 <remarks></remarks>
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_UNKNOWN">
 <summary> 
 This value implies the driver is unaware of the current 
 state of the reader. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_ABSENT">
 <summary> 
 This value implies there is no card in the reader. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_PRESENT">
 <summary> 
 This value implies there is a card is present in the reader, 
 but that it has not been moved into position for use. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_SWALLOWED">
 <summary> 
 This value implies there is a card in the reader in position 
 for use. The card is not powered. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_POWERED">
 <summary> 
 This value implies there is power is being provided to the card, 
 but the Reader Driver is unaware of the mode of the card. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_NEGOTIABLE">
 <summary> 
 This value implies the card has been reset and is awaiting 
 PTS negotiation. 
 </summary> 
</member>
<member name="F:UMIDCardPerso.ModWinsCard.SCARD_SPECIFIC">
 <summary> 
 This value implies the card has been reset and specific 
 communication protocols have been established. 
 </summary> 
</member>
<member name="M:UMIDCardPerso.ModWinsCard.SCardEstablishContext(System.Int32,System.Int32,System.Int32,System.Int32@)">
 <summary> 
 The SCardEstablishContext function establishes the resource manager context (the scope) within which database operations are performed. 
 </summary> 
 <param name="dwScope">[in] Scope of the resource manager context. This parameter can be one of the following values.</param> 
 <param name="pvReserved1">[in] Reserved for future use and must be NULL. This parameter will allow a suitably privileged management application to act on behalf of another user.</param> 
 <param name="pvReserved2">[in] Reserved for future use and must be NULL. </param> 
 <param name="phContext">[out] Handle to the established resource manager context. This handle can now be supplied to other functions attempting to do work within this context.</param> 
 <returns></returns> 
</member>
<member name="M:UMIDCardPerso.ModWinsCard.SCardReleaseContext(System.Int32)">
 <summary> 
 The SCardReleaseContext function closes an established resource manager context, freeing any resources allocated under that context, including SCARDHANDLE objects and memory allocated using the SCARD_AUTOALLOCATE length designator. 
 </summary> 
 <param name="hContext">[in] Handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext.</param> 
 <returns></returns> 
</member>
<member name="M:UMIDCardPerso.ModWinsCard.SCardConnect(System.Int32,System.String@,System.Int32,System.Int32,System.Int32@,System.Int32@)">
 <summary> 
 The SCardConnect function establishes a connection (using a specific resource manager context) between the calling application and a smart card contained by a specific reader. If no card exists in the specified reader, an error is returned. 
 </summary> 
 <param name="hContext">[in] A handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext.</param> 
 <param name="szReaderName">[in] The name of the reader that contains the target card. </param> 
 <param name="dwShareMode">[in] A flag that indicates whether other applications may form connections to the card.</param> 
 <param name="dwPrefProtocol">[in] A bit mask of acceptable protocols for the connection. Possible values may be combined with the OR operation.</param> 
 <param name="hCard">[out] A handle that identifies the connection to the smart card in the designated reader. </param> 
 <param name="ActiveProtocol">[out] A flag that indicates the established active protocol.</param> 
 <returns></returns> 
</member>
<member name="M:UMIDCardPerso.ModWinsCard.SCardDisconnect(System.Int32,System.Int32)">
 <summary> 
 The SCardDisconnect function terminates a connection previously opened between the calling application and a smart card in the target reader. 
 </summary> 
 <param name="hCard">[in] Reference value obtained from a previous call to SCardConnect. </param> 
 <param name="Disposition">[in] Action to take on the card in the connected reader on close. </param> 
 <returns>This function returns different values depending on whether it succeeds or fails.</returns> 
</member>
<member name="M:UMIDCardPerso.ModWinsCard.SCardListReaderGroups(System.Int32,System.String@,System.Int32@)">
 <summary> 
 The SCardListReaderGroups function provides the list of reader groups that have previously been introduced to the system. 
 </summary> 
 <param name="hContext">[in] Handle that identifies the resource manager context for the query. The resource manager context can be set by a previous call to SCardEstablishContext. This parameter cannot be NULL.</param> 
 <param name="mzGroups">[out] Multi-string that lists the reader groups defined to the system and available to the current user on the current terminal. If this value is NULL, SCardListReaderGroups ignores the buffer length supplied in pcchGroups, writes the length of the buffer that would have been returned if this parameter had not been NULL to pcchGroups, and returns a success code.</param> 
 <param name="pcchGroups">[in, out] Length of the mszGroups buffer in characters, and receives the actual length of the multi-string structure, including all trailing null characters. If the buffer length is specified as SCARD_AUTOALLOCATE, then mszGroups is converted to a pointer to a byte pointer, and receives the address of a block of memory containing the multi-string structure. This block of memory must be deallocated with SCardFreeMemory. </param> 
 <returns>This function returns different values depending on whether it succeeds or fails.</returns> 
</member>
<member name="M:UMIDCardPerso.ModWinsCard.SCardBeginTransaction(System.Int32)">
 <summary> 
 The SCardBeginTransaction function starts a transaction, waiting for the completion of all other transactions before it begins. 
 When the transaction starts, all other applications are blocked from accessing the smart card while the transaction is in progress. 
 </summary> 
 <param name="hCard">[in] Reference value obtained from a previous call to SCardConnect.</param> 
 <returns>This function returns different values depending on whether it succeeds or fails.</returns> 
</member>
<member name="M:UMIDCardPerso.ModWinsCard.SCardEndTransaction(System.Int32,System.Int32)">
 <summary> 
 The SCardEndTransaction function completes a previously declared transaction, allowing other applications to resume interactions with the card. 
 </summary> 
 <param name="hCard">[in] Reference value obtained from a previous call to SCardConnect. This value would also have been used in an earlier call to SCardBeginTransaction.</param> 
 <param name="Disposition">[in] Action to take on the card in the connected reader on close. </param> 
 <returns>This function returns different values depending on whether it succeeds or fails.</returns> 
</member>
<member name="M:UMIDCardPerso.ModWinsCard.SCardStatus(System.Int32,System.String@,System.Int32@,System.Int32@,System.Int32@,System.Byte@,System.Int32@)">
 <summary> 
 The SCardStatus function provides the current status of a smart card in a reader. You can call it any time after a successful call to SCardConnect and before a successful call to SCardDisconnect. It does not affect the state of the reader or reader driver. 
 </summary> 
 <param name="hCard">[in] Reference value returned from SCardConnect. </param> 
 <param name="szReaderName">[out] List of friendly names (multiple string) by which the currently connected reader is known. </param> 
 <param name="pcchReaderLen">[in, out] On input, supplies the length of the szReaderName buffer. 
 On output, receives the actual length (in characters) of the reader name list, including the trailing NULL character. If this buffer length is specified as SCARD_AUTOALLOCATE, then szReaderName is converted to a pointer to a byte pointer, and it receives the address of a block of memory that contains the multiple-string structure.</param> 
 <param name="State">[out] Current state of the smart card in the reader. Upon success, it receives one of the following state indicators.</param> 
 <param name="Protocol">[out] Current protocol, if any. The returned value is meaningful only if the returned value of pdwState is SCARD_SPECIFICMODE.</param> 
 <param name="ATR">[out] Pointer to a 32-byte buffer that receives the ATR string from the currently inserted card, if available.</param> 
 <param name="ATRLen">[in, out] On input, supplies the length of the pbAtr buffer. On output, receives the number of bytes in the ATR string (32 bytes maximum). If this buffer length is specified as SCARD_AUTOALLOCATE, then pbAtr is converted to a pointer to a byte pointer, and it receives the address of a block of memory that contains the multiple-string structure.</param> 
 <returns>If the function successfully provides the current status of a smart card in a reader, the return value is SCARD_S_SUCCESS. 
 If the function fails, it returns an error code. For more information, see Smart Card Return Values.</returns> 
</member>
<member name="M:UMIDCardPerso.ModWinsCard.SCardTransmit(System.Int32,UMIDCardPerso.SCARD_IO_REQUEST@,System.Byte@,System.Int32,UMIDCardPerso.SCARD_IO_REQUEST@,System.Byte@,System.Int32@)">
 <summary> 
 The SCardTransmit function sends a service request to the smart card and expects to receive data back from the card. 
 </summary> 
 <param name="hCard">[in] A reference value returned from the SCardConnect function.</param> 
 <param name="pioSendRequest">[in] A pointer to the protocol header structure for the instruction. This buffer is in the format of an SCARD_IO_REQUEST structure, followed by the specific protocol control information (PCI). 
 For the T=0, T=1, and Raw protocols, the PCI structure is constant. The smart card subsystem supplies a global T=0, T=1, or Raw PCI structure, which you can reference by using the symbols SCARD_PCI_T0, SCARD_PCI_T1, and SCARD_PCI_RAW respectively.</param> 
 <param name="SendBuff">[in] A pointer to the actual data to be written to the card. </param> 
 <param name="SendBuffLen">[in] The length, in bytes, of the pbSendBuffer parameter. </param> 
 <param name="pioRecvRequest">[in, out] Pointer to the protocol header structure for the instruction, followed by a buffer in which to receive any returned protocol control information (PCI) specific to the protocol in use. This parameter can be NULL if no PCI is returned. </param> 
 <param name="RecvBuff">[out] Pointer to any data returned from the card. </param> 
 <param name="RecvBuffLen">[in, out] Supplies the length, in bytes, of the pbRecvBuffer parameter and receives the actual number of bytes received from the smart card. This value cannot be SCARD_AUTOALLOCATE because SCardTransmit does not support SCARD_AUTOALLOCATE.</param> 
 <returns>If the function successfully sends a service request to the smart card, the return value is SCARD_S_SUCCESS. 
 If the function fails, it returns an error code. For more information, see Smart Card Return Values.</returns> 
</member>
<member name="M:UMIDCardPerso.ModWinsCard.SCardListReaders(System.Int32,System.String@,System.String@,System.Int32@)">
 <summary> 
 The SCardListReaders function provides the list of readers within a set of named reader groups, eliminating duplicates. 
 The caller supplies a list of reader groups, and receives the list of readers within the named groups. Unrecognized group names are ignored. 
 </summary> 
 <param name="hContext">[in] Handle that identifies the resource manager context for the query. The resource manager context can be set by a previous call to SCardEstablishContext. This parameter cannot be NULL.</param> 
 <param name="mzGroup">[in] Names of the reader groups defined to the system, as a multi-string. Use a NULL value to list all readers in the system (that is, the SCard$AllReaders group). </param> 
 <param name="ReaderList">[out] Multi-string that lists the card readers within the supplied reader groups. If this value is NULL, SCardListReaders ignores the buffer length supplied in pcchReaders, writes the length of the buffer that would have been returned if this parameter had not been NULL to pcchReaders, and returns a success code.</param> 
 <param name="pcchReaders">[in, out] Length of the mszReaders buffer in characters. This parameter receives the actual length of the multi-string structure, including all trailing null characters. If the buffer length is specified as SCARD_AUTOALLOCATE, then mszReaders is converted to a pointer to a byte pointer, and receives the address of a block of memory containing the multi-string structure. This block of memory must be deallocated with SCardFreeMemory.</param> 
 <returns>This function returns different values depending on whether it succeeds or fails.</returns> 
</member>
<member name="M:UMIDCardPerso.ModWinsCard.SCardGetStatusChange(System.Int32,System.Int32,UMIDCardPerso.SCARD_READERSTATE@,System.Int32)">
 <summary>
 The SCardGetStatusChange function blocks execution until the current availability of the cards in a specific set of readers changes.
 </summary>
 <param name="hContext">[in] Handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext. </param>
 <param name="TimeOut">[in] Maximum amount of time (in milliseconds) to wait for an action. A value of zero causes the function to return immediately. A value of INFINITE causes this function never to time out. </param>
 <param name="ReaderState">[in, out] Array of SCARD_READERSTATE structures that specify the readers to watch, and receives the result. </param>
 <param name="ReaderCount">[in] Number of elements in the rgReaderStates array. </param>
 <returns>This function returns different values depending on whether it succeeds or fails.</returns>
 <remarks></remarks>
</member>
<member name="M:UMIDCardPerso.ModWinsCard.SCardControl(System.Int32,System.Int32,System.Byte@,System.Int32,System.Byte@,System.Int32,System.Int32@)">
 <summary> 
 The SCardControl function gives you direct control of the reader. You can call it any time after a successful call to SCardConnect and before a successful call to SCardDisconnect. The effect on the state of the reader depends on the control code. 
 </summary> 
 <param name="hCard">[in] Reference value returned from SCardConnect. </param> 
 <param name="dwControlCode">[in] Control code for the operation. This value identifies the specific operation to be performed.</param> 
 <param name="pvInBuffer">[in] Pointer to a buffer that contains the data required to perform the operation. This parameter can be NULL if the dwControlCode parameter specifies an operation that does not require input data. </param> 
 <param name="cbInBufferSize">[in] Size, in bytes, of the buffer pointed to by lpInBuffer. </param> 
 <param name="pvOutBuffer">[out] Pointer to a buffer that receives the operation's output data. This parameter can be NULL if the dwControlCode parameter specifies an operation that does not produce output data. </param> 
 <param name="cbOutBufferSize">[in] Size, in bytes, of the buffer pointed to by lpOutBuffer. </param> 
 <param name="pcbBytesReturned">[out] Pointer to a DWORD that receives the size, in bytes, of the data stored into the buffer pointed to by lpOutBuffer. </param> 
 <returns>This function returns different values depending on whether it succeeds or fails.</returns> 
</member>
<member name="M:UMIDCardPerso.ModWinsCard.GetScardErrMsg(System.Int64)">
 <summary> 
 Returns the specific error message 
 </summary> 
 <param name="errCode">The error code</param> 
 <returns></returns> 
</member>
<member name="M:UMIDCardPerso.ModWinsCard.LoadListControl(System.Windows.Forms.ComboBox,System.String)">
 <summary> 
 Load the list from 2nd parameter (readerList) to the ComboBox control from 1st Parameter (ctrl) 
 </summary> 
 <param name="ctrl">The ComboBox control where do you want to load the list of reader</param> 
 <param name="readerList">The string variable that contains the list of readers</param> 
</member>
</members>
</doc>
